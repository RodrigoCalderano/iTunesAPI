apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'jacoco'
apply plugin: 'io.gitlab.arturbosch.detekt'

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.2"
    defaultConfig {
        applicationId "com.ciandt.book.seeker"
        minSdkVersion 21
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        debug {
            testCoverageEnabled = true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    testOptions {
        unitTests.includeAndroidResources = true
        animationsDisabled true
        execution "ANDROIDX_TEST_ORCHESTRATOR"
        unitTests.all {
            jacoco {
                includeNoLocationClasses = true
            }
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = "1.8"
    }

    androidExtensions {
        experimental = true
    }
}


dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    // androidx dependencies
    implementation 'androidx.core:core-ktx:1.1.0'
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'androidx.recyclerview:recyclerview:1.0.0'

    // kotlin & coroutines dependencies
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.3.50'
    implementation 'org.jetbrains.kotlin:kotlin-reflect:1.3.50'
    implementation 'org.jetbrains.kotlin:kotlin-android-extensions-runtime:1.3.50'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.0'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.3.0'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.3.0'

    // other dependencies
    implementation 'com.squareup.retrofit2:retrofit:2.5.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:3.13.1'
    implementation 'com.squareup.retrofit2:converter-moshi:2.5.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.5.0'

    // test dependencies
    testImplementation 'androidx.test:core:1.2.0'
    testImplementation 'junit:junit:4.12'
    testImplementation 'io.mockk:mockk:1.9.3'
    testImplementation 'com.squareup.okhttp3:mockwebserver:3.9.1'

    // android test dependencies
    androidTestImplementation 'androidx.test:core:1.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test:rules:1.2.0'

    detektPlugins "io.gitlab.arturbosch.detekt:detekt-formatting:1.0.1"
}

detekt {
    toolVersion '1.0.1'
    input = files("src/main/java")
    config = files("$rootDir/default-detekt-config.yml")
    reports {
        xml { enabled = false }
        txt { enabled = false }
    }
}

configurations {
    jacocoReport
}

jacoco {
    toolVersion = "0.8.4"
}

task jacocoAndroidTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {

    group = "Reporting"
    description = "Generate unified Jacoco code coverage report"

    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
    def coverageTree = fileTree(dir: "${buildDir}/intermediates/javac/debug/", excludes: fileFilter)
    def kotlinCoverageTree = fileTree(dir: "${buildDir}/tmp/kotlin-classes/debug/com/ciandt/book/seeker/", excludes: fileFilter)

    def mainSrc = "${project.projectDir}/src/androidTest/java/com/ciandt/book/seeker/"

    sourceDirectories.setFrom(files([mainSrc]))
    classDirectories.setFrom(files([coverageTree], [kotlinCoverageTree]))
    executionData.setFrom(fileTree(dir: "$buildDir", includes: [
            "jacoco/testDebugUnitTest.exec",
            "outputs/code_coverage/debugAndroidTest/connected/**/*.ec"
    ]))
}